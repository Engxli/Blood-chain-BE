name: CI/CD Workflow

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

env:
  SECRET_KEY: django-insecure-r7fqwtr4x#8#amsom5&0cs9r77j%$_op9h!^1q2yc9s*tc+4t(
  APPLICATION_NAME: Blood-Chain
  ENVIRONMENT_NAME: Blood-Chain-Env
  AWS_REGION: ap-south-1
  DEPLOYMENT_PACKAGE: deploy.zip
  PIPELINE_ID: ${{ github.run_id }}-${{ github.run_number }}

jobs:
  lint-commits:
    runs-on: ubuntu-latest

    steps:
      - name: Check Commit Type
        uses: gsactions/commit-message-checker@v1
        with:
          # Unit tests: https://regex101.com/r/FEWmxs/2
          pattern: '^Merge(?:.|\n)+$|^(?:(?:[A-Z][a-z].{2,48}|[a-z]{4,8}: .{2,46})(?:\n\n[A-Z][a-z](?:\n|.)+)?)$'
          flags: ""
          error: "Write proper git commit messages."
          excludeDescription: "true"
          excludeTitle: "true"
          checkAllCommitMessages: "true"
          accessToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Line Length
        uses: gsactions/commit-message-checker@v1
        with:
          pattern: "^.{4,72}$"
          flags: "gm"
          error: "The maximum line length of 72 characters is exceeded."
          excludeDescription: "true"
          excludeTitle: "true"
          checkAllCommitMessages: "true"
          accessToken: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Access Repository
        uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9.13

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: poetry-deps
        uses: actions/cache@v3
        with:
          path: .venv
          key: cache-v1-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies with poetry
        if: steps.poetry-deps.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Lint with isort
        run: poetry run isort --check-only .

      - name: Lint with black
        run: poetry run black --check .

      - name: Lint with mypy
        run: poetry run mypy .

      - name: Lint with pylint
        run: poetry run pylint **/*.py

      - name: Test with pytest
        run: poetry run pytest --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Access repository
        uses: actions/checkout@v3

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "masterclass-blood-chain"
          heroku_email: "malthunayan4@gmail.com"

      - name: Run migrations on Heroku
        run: |
          heroku run ./manage.py collectstatic --noinput
          heroku run ./manage.py migrate --noinput

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Generate deployment package
        run: zip -r ${{ env.DEPLOYMENT_PACKAGE }} . -x '*.git*'

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.APPLICATION_NAME }}
          environment_name: ${{ env.ENVIRONMENT_NAME }}
          version_label: app-${{ env.PIPELINE_ID }}
          version_description: ${{ github.SHA }}
          region: ${{ env.AWS_REGION }}
          deployment_package: ${{ env.DEPLOYMENT_PACKAGE }}
